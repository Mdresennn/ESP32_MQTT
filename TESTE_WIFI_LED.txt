//dupla: Vinicius pinheiro e mateus


#include <WiFi.h>
#include <PubSubClient.h>

// --- Configurações Wi-Fi ---
const char* ssid = "iPhone";
const char* password = "iot_sul_123";

// --- Configurações MQTT ---
const char* mqtt_server = "test.mosquitto.org";
const int mqtt_port = 1883;

// Tópicos MQTT - INVERTIDOS em relação à dupla A
const char* topic_pub = "DuplaA/Comando";   // Envia comandos para a dupla A
const char* topic_sub = "DuplaB/Comando";   // Recebe comandos da dupla A

WiFiClient espClient;
PubSubClient client(espClient);

const int ledPin = 2; // GPIO do LED (use outro se necessário)

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Conectando a rede Wi-Fi: ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 30) {
    delay(500);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWi-Fi conectado!");
    Serial.print("IP: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFalha ao conectar no Wi-Fi.");
  }
}

// Callback: executa ao receber mensagem MQTT
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensagem recebida no tópico [");
  Serial.print(topic);
  Serial.print("]: ");

  String message;
  for (unsigned int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  message.trim();
  Serial.println(message);

  // Comandos de controle do LED
  if (message.equalsIgnoreCase("LIGAR")) {
    digitalWrite(ledPin, HIGH);
    Serial.println("LED LIGADO");
  }
  else if (message.equalsIgnoreCase("DESLIGAR")) {
    digitalWrite(ledPin, LOW);
    Serial.println("LED DESLIGADO");
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conectar MQTT...");
    String clientId = "ESP32ClientB-";
    clientId += String(random(0xffff), HEX);

    if (client.connect(clientId.c_str())) {
      Serial.println("conectado!");
      client.subscribe(topic_sub);
      Serial.printf("Inscrito no tópico: %s\n", topic_sub);
    } else {
      Serial.print("falha, rc=");
      Serial.print(client.state());
      Serial.println(" tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  Serial.begin(115200);
  setup_wifi();

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  Serial.println("Digite comandos para enviar à dupla A (LIGAR ou DESLIGAR):");
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if (Serial.available() > 0) {
    String message = Serial.readStringUntil('\n');
    message.trim();
    if (message.length() > 0) {
      Serial.print("Enviando mensagem: ");
      Serial.println(message);
      client.publish(topic_pub, message.c_str());
    }
  }
}